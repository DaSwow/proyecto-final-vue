{"ast":null,"code":"var _rgba$inputs;\n// Utilities\nimport { HexToHSVA, HSLAtoHSVA, HSVAtoHex, HSVAtoHSLA, HSVAtoRGBA, parseHex, RGBAtoHSVA } from \"../../../util/colorUtils.mjs\"; // Types\nfunction has(obj, key) {\n  return key.every(k => obj.hasOwnProperty(k));\n}\nexport function parseColor(color) {\n  if (!color) return null;\n  let hsva = null;\n  if (typeof color === 'string') {\n    const hex = parseHex(color);\n    hsva = HexToHSVA(hex);\n  }\n  if (typeof color === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      hsva = RGBAtoHSVA(color);\n    } else if (has(color, ['h', 's', 'l'])) {\n      hsva = HSLAtoHSVA(color);\n    } else if (has(color, ['h', 's', 'v'])) {\n      hsva = color;\n    }\n  }\n  return hsva != null ? {\n    ...hsva,\n    a: hsva.a ?? 1\n  } : null;\n}\nfunction stripAlpha(color, stripAlpha) {\n  if (stripAlpha) {\n    const {\n      a,\n      ...rest\n    } = color;\n    return rest;\n  }\n  return color;\n}\nexport function extractColor(color, input) {\n  if (input == null || typeof input === 'string') {\n    const hex = HSVAtoHex(color);\n    if (color.a === 1) return hex.slice(0, 7);else return hex;\n  }\n  if (typeof input === 'object') {\n    let converted;\n    if (has(input, ['r', 'g', 'b'])) converted = HSVAtoRGBA(color);else if (has(input, ['h', 's', 'l'])) converted = HSVAtoHSLA(color);else if (has(input, ['h', 's', 'v'])) converted = color;\n    return stripAlpha(converted, !has(input, ['a']));\n  }\n  return color;\n}\nexport function hasAlpha(color) {\n  if (!color) return false;\n  if (typeof color === 'string') {\n    return color.length > 7;\n  }\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha']);\n  }\n  return false;\n}\nexport const nullColor = {\n  h: 0,\n  s: 0,\n  v: 1,\n  a: 1\n};\nconst rgba = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'R',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.r),\n    getColor: (c, v) => ({\n      ...c,\n      r: Number(v)\n    })\n  }, {\n    label: 'G',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.g),\n    getColor: (c, v) => ({\n      ...c,\n      g: Number(v)\n    })\n  }, {\n    label: 'B',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.b),\n    getColor: (c, v) => ({\n      ...c,\n      b: Number(v)\n    })\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.a * 100) / 100,\n    getColor: (c, v) => ({\n      ...c,\n      a: Number(v)\n    })\n  }],\n  to: HSVAtoRGBA,\n  from: RGBAtoHSVA\n};\nconst rgb = {\n  ...rgba,\n  inputs: (_rgba$inputs = rgba.inputs) == null ? void 0 : _rgba$inputs.slice(0, 3)\n};\nconst hsla = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'H',\n    max: 360,\n    step: 1,\n    getValue: c => Math.round(c.h),\n    getColor: (c, v) => ({\n      ...c,\n      h: Number(v)\n    })\n  }, {\n    label: 'S',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.s * 100) / 100,\n    getColor: (c, v) => ({\n      ...c,\n      s: Number(v)\n    })\n  }, {\n    label: 'L',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.l * 100) / 100,\n    getColor: (c, v) => ({\n      ...c,\n      l: Number(v)\n    })\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.a * 100) / 100,\n    getColor: (c, v) => ({\n      ...c,\n      a: Number(v)\n    })\n  }],\n  to: HSVAtoHSLA,\n  from: HSLAtoHSVA\n};\nconst hsl = {\n  ...hsla,\n  inputs: hsla.inputs.slice(0, 3)\n};\nconst hexa = {\n  inputProps: {\n    type: 'text'\n  },\n  inputs: [{\n    label: 'HEXA',\n    getValue: c => c,\n    getColor: (c, v) => v\n  }],\n  to: HSVAtoHex,\n  from: HexToHSVA\n};\nconst hex = {\n  ...hexa,\n  inputs: [{\n    label: 'HEX',\n    getValue: c => c.slice(0, 7),\n    getColor: (c, v) => v\n  }]\n};\nexport const modes = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa\n};","map":{"version":3,"mappings":"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","names":["HexToHSVA","HSLAtoHSVA","HSVAtoHex","HSVAtoHSLA","HSVAtoRGBA","parseHex","RGBAtoHSVA","has","obj","key","every","k","hasOwnProperty","parseColor","color","hsva","hex","a","stripAlpha","rest","extractColor","input","slice","converted","hasAlpha","length","nullColor","h","s","v","rgba","inputProps","type","min","inputs","label","max","step","getValue","c","Math","round","r","getColor","Number","g","b","to","from","rgb","_rgba$inputs","hsla","l","hsl","hexa","modes"],"sources":["../../../../src/components/VColorPicker/util/index.ts"],"sourcesContent":["// Utilities\nimport {\n  HexToHSVA,\n  HSLAtoHSVA,\n  HSVAtoHex,\n  HSVAtoHSLA,\n  HSVAtoRGBA,\n  parseHex,\n  RGBAtoHSVA,\n} from '@/util/colorUtils'\n\n// Types\nimport type {\n  HSLA,\n  HSVA,\n  RGBA,\n} from '@/util/colorUtils'\n\nfunction has (obj: object, key: string[]) {\n  return key.every(k => obj.hasOwnProperty(k))\n}\n\nexport function parseColor (color: any): HSVA | null {\n  if (!color) return null\n\n  let hsva: HSVA | null = null\n\n  if (typeof color === 'string') {\n    const hex = parseHex(color)\n\n    hsva = HexToHSVA(hex)\n  }\n\n  if (typeof color === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      hsva = RGBAtoHSVA(color)\n    } else if (has(color, ['h', 's', 'l'])) {\n      hsva = HSLAtoHSVA(color)\n    } else if (has(color, ['h', 's', 'v'])) {\n      hsva = color\n    }\n  }\n\n  return hsva != null ? { ...hsva, a: hsva.a ?? 1 } : null\n}\n\nfunction stripAlpha (color: any, stripAlpha: boolean) {\n  if (stripAlpha) {\n    const { a, ...rest } = color\n\n    return rest\n  }\n\n  return color\n}\n\nexport function extractColor (color: HSVA, input: any) {\n  if (input == null || typeof input === 'string') {\n    const hex = HSVAtoHex(color)\n\n    if (color.a === 1) return hex.slice(0, 7)\n    else return hex\n  }\n\n  if (typeof input === 'object') {\n    let converted\n\n    if (has(input, ['r', 'g', 'b'])) converted = HSVAtoRGBA(color)\n    else if (has(input, ['h', 's', 'l'])) converted = HSVAtoHSLA(color)\n    else if (has(input, ['h', 's', 'v'])) converted = color\n\n    return stripAlpha(converted, !has(input, ['a']))\n  }\n\n  return color\n}\n\nexport function hasAlpha (color: any) {\n  if (!color) return false\n\n  if (typeof color === 'string') {\n    return color.length > 7\n  }\n\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha'])\n  }\n\n  return false\n}\n\nexport const nullColor = { h: 0, s: 0, v: 1, a: 1 }\n\nexport type ColorPickerMode = {\n  inputProps: Record<string, unknown>\n  inputs: {\n    [key: string]: any\n    getValue: (color: any) => number | string\n    getColor: (color: any, v: string) => any\n  }[]\n  from: (color: any) => HSVA\n  to: (color: HSVA) => any\n}\n\nconst rgba: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'R',\n      max: 255,\n      step: 1,\n      getValue: (c: RGBA) => Math.round(c.r),\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, r: Number(v) }),\n    },\n    {\n      label: 'G',\n      max: 255,\n      step: 1,\n      getValue: (c: RGBA) => Math.round(c.g),\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, g: Number(v) }),\n    },\n    {\n      label: 'B',\n      max: 255,\n      step: 1,\n      getValue: (c: RGBA) => Math.round(c.b),\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, b: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: (c: RGBA) => Math.round(c.a * 100) / 100,\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVAtoRGBA,\n  from: RGBAtoHSVA,\n}\n\nconst rgb = {\n  ...rgba,\n  inputs: rgba.inputs?.slice(0, 3),\n}\n\nconst hsla: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'H',\n      max: 360,\n      step: 1,\n      getValue: (c: HSLA) => Math.round(c.h),\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, h: Number(v) }),\n    },\n    {\n      label: 'S',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSLA) => Math.round(c.s * 100) / 100,\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, s: Number(v) }),\n    },\n    {\n      label: 'L',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSLA) => Math.round(c.l * 100) / 100,\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, l: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSLA) => Math.round(c.a * 100) / 100,\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVAtoHSLA,\n  from: HSLAtoHSVA,\n}\n\nconst hsl = {\n  ...hsla,\n  inputs: hsla.inputs.slice(0, 3),\n}\n\nconst hexa: ColorPickerMode = {\n  inputProps: {\n    type: 'text',\n  },\n  inputs: [\n    {\n      label: 'HEXA',\n      getValue: (c: string) => c,\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n  to: HSVAtoHex,\n  from: HexToHSVA,\n}\n\nconst hex = {\n  ...hexa,\n  inputs: [\n    {\n      label: 'HEX',\n      getValue: (c: string) => c.slice(0, 7),\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n}\n\nexport const modes: Record<string, ColorPickerMode> = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa,\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}